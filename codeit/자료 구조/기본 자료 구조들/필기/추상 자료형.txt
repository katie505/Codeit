<추상 자료형>

기능 vs 구현
- 기능 : 연산이 '무엇'을 하는지 
- 구현 : 연산의 기능을 '어떻게' 하는지
EX) 삽입 연산의 기능과 구현
- 기능 : 순서 데이터에서 원하는 위치에 데이터 저장
- 구현 

추상화
- 구현을 몰라도 기능만 알면 프로그래밍을 할 수 있게 해주는 개념
- 추상 자료형 : 자료 구조를 추상화 한 것. 데이터를 저장/사용할 때 기능만 생각

추상 자료형(ADT : Abstract Data Type) VS 자료 구조
- 추상 자료형 : 리스트. 기능만 나열
- 자료 구조 : 동적 배열. 기능 + 구현
- 동적 배열은 리스트의 모든 연산들을 갖고 있는 자료 구조
- 리스트는 동적 배열로 구현할 수 있다
- 연결 리스트도 리스트를 구현할 수 있는 자료 구조
- 프로그래밍을 할 때 추상 자료형을 먼저 떠올리는 것이 더 편함
=> 기능을 떠올리는 것은 쉬우나 매번 기능을 어떻게 구현할 지 생각하는 것은 어려움
* 파이썬은 추상화가 많이 된 고수준 언어 : 구현보다 기능에 집중할 수 있게 해줌. 많은 자료형 이름이 추상 자료형(리스트)

리스트
- 데이터 간 순서 관계를 유지해주는 대표적인 추상 자료형
- 어떤 기능을 많이 사용할 지 생각하고 동적 배열과 이중 연결 리스트의 시간 복잡도를 비교해서 더 효율적인 자료 구조 사용
- 파이썬 리스트는 내부적으로 동적 배열로 구현되어 있기 때문에 각 연산들의 효율을 알고 싶다면 동적 배율의 시간복잡도 생각하기

큐(Queue)
- 대기열
- 데이터를 삭제할 때는 가장 앞에서, 삽입할 때는 가장 뒤에서 하는 추상 자료형(FIFO : First-in-first-out)
- 데이터 간 순서 관계 유지할 수 있음
- 맨 앞 데이터 접근. 맨 앞 데이터 삭제. 맨 뒤 데이터 추가
- 파이썬에서는 Deque 자료형을 사용해서 큐를 쓸 수 있음.
- deque : Doubly - ended - queue의 약자. 맨 앞, 뒤에 데이터를 삽입하고 삭제할 수 있게 해주는 자료형
- 큐 구현 : 동적 배열로 구현할 수 있지만, 이중 연결 리스트로 구현하는 것이 더 효율적 = O(1)
- 파이썬 deque : 내부적으로는 이중 연결 리스트로 구현되어 있음 = O(1)

스택(stack)
- 2가지 주요 연산(추가, 삭제)을 지원하는 요소의 컬렉션으로 사용되는 추상 자료형
- 거의 모든 애플리케이션을 만들 때 사용되는 자료 구조
- 콜 스택이라 하여 컴퓨터 프로그램의 서브루틴에 대한 정보를 저장하는 자료구조에도 널리 화용됨
=> 컴파일러가 출력하는 에러도 스택처럼 맨 마지막 에러가 가장 먼저 출력되는 순서를 보임
- 데이터 간 순서를 유지하는 추상 자료형
- 항상 맨 끝에 있는 데이터를 추가하고 삭제(LIF0 : Last-in-first-out)
- 맨 뒤 데이터 추가, 삭제, 접근
- 파이썬은 스택 자료형을 별도로 제공하지는 않지만, '리스트'가 사실상 스택의 모든 연산 지원
- 스택 구현 : 동적 배열, 연결 리스트로 구현 가능. 두 자료 구조 모두 O(1). 

딕셔너리(Dictionary)
- 데이터간 순서 관계를 약속하지 않음
- key를 이용한 데이터 탐색, 삭제
- key - value 데이터 쌍 삽입
- 해시 테이블로 구현할 수 있음 : O(1)

세트(Set)
- 집합
- 데이터간 순서 관계를 약속하지 않음
- 삽입(중복 데이터 x), 탐색, 삭제
- 세트 구현 : 해시 테이블로 구현. 해시 테이블은 인덱스에 key, value를 모두 저장하지만, 세트에서는 인덱스에 key만 저장. 
=> 탐색과 삭제 연산은 key만 이용
=> O(1)
