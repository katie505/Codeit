<트리>
- 데이터의 상하 관계를 저장하는 자료 구조
- 상하 관계 = 계층적 관계 : 컴퓨터 폴더 구조, 클래스 상속 관계

계층 데이터 저장
- 배열, 링크드 리스트는 선형적 자료 구조이므로 적절x
- 해시 테이블은 데이터 관계를 저장하지 않기 때문에 적절x
- '트리'를 통해서 계층 데이터 저장

트리
- 하위 관계가 있는 노드들을 가리키는 레퍼런스를 갖음
- 부모 노드, 자식 노드, 형제 노드
- root 노드 : 트리의 가장 위에 있는 노드
- leaf 노드(잎/말단 노드) : 자식 노드를 갖고 있지 않은, 가장 말단에 있는 노드
- 깊이 : 특정 노드가 root노드에서 떨어져 있는 거리
- 레벨 : 깊이 + 1. 깊이랑 거의 같은 개념. 특정 깊이인 노드들을 묶어서 표현할 때 사용
- 높이 : 트리에서 가장 깊이 있는 노드의 깊이
- 부분 트리 : 현재 트리의 일부분을 이루고 있는 더 작은 트리

트리의 활용
- 계층적 관계가 있는 데이터를 컴퓨터에서 사용
- 컴퓨터 과학의 다양한 문제들을 기발하게 해결 : 정렬 문제, 압축 문제
- 흔히 사용하는 여러 추상 자료형 구현 : 딕셔너리, 세트, 우선순위 큐...

이진 트리
- 각 노드가 최대 2개의 자식 노드를 갖을 수 있는 트리
- 왼쪽 자식 & 오른쪽 자식
1) 정 이진 트리(Full Binary Tree)
- 모든 노드가 2개 또는 0개의 자식을 갖는 이진 트리
2) 완전 이진 트리(Complete Binary Tree)
- 마지막 레벨 직전의 레벨까지는 모든 노드들이 다 채워진 트리
- 마지막 레벨에서는 노드들이 다 채워질 필요는 없더라도, 왼쪽부터 오른쪽 방향으로는 노드들이 다 채워져야 함
- 높이 : 항상 lg(n)에 비례
3) 포화 이진 트리(Perfect Binary Tree)
- 모든 레벨이 빠짐없이 다 노드로 채워져있는 이진 트리
- 높이나 노드 수, 둘 중에서 하나만 알아도 나머지 하나의 값을 바로 구할 수 있음
- 트리의 높이 h, 노드 수 n => n = 2^(h+1) - 1

완전 이진 트리를 배열(파이썬 리스트)로 구현
1) 0번째 인덱스를 None으로, 1번째 인덱스부터 root 노드 시작. 그 다음 왼쪽에서 오른쪽 방향 순으로 리스트에 저장
2) 왼쪽 자식 노드 찾는 방법 : 부모 노드가 저장된 인덱스 * 2
3) 오른쪽 자식 노드 : 부모 노드가 저장된 인덱스 * 2 + 1
4) 부모 노드 : 짝수일 경우 2로 나누고 / 홀수일 경우 2로 나눈 후 정수 값만

순회
- 자료 구조에 저장된 모든 데이터를 도는 것
- 선형적 자료 구조는 주로 반복문, 트리는 재귀함수 사용

<트리 순회>
- 순회 함수 자신을 호출하게 함
- 트리를 순회하면 노드들 사이에 선형적 순서를 만들 수 있음 = 선형적 관계 사용 가능!
- 순회 기본 동작
1) 재귀적으로 왼쪽 부분 트리 순회 = 전체 노드 대신 root node의 왼쪽 자식 노드의 부분 트리 순회 
2) 재귀적으로 오른쪽 부분 트리 순회 = root node의 오른쪽 자식 노드의 부분 트리 순회
3) 현재 노드 데이터 출력 

*출력은 leaf 노드부터 
*현재 노드 데이터는 root 노드
1. pre-order 순회
- 순회 기본 동작을 3 - 1 - 2 순으로 실행
- 두 개의 부분 트리를 순회하기 전에 현재 노드 데이터 출력하는 방법

2. post-order 순회
- 순회 기본 동작을 1 - 2 - 3 순으로 진행
- 두 개의 부분 트리를 순회한 후에 현재 노드 데이터 출력하는 방법
- 왼쪽 부분 트리에 있는 노드들이 출력되고 오른쪽 부분 트리에 

3. in-order 순회
- 순회 기본 동작을 2 - 3 - 1순으로 진행
- 데이터를 출력하는 동작이 부분 트리 순회 사이에 있음
- 제일 왼쪽 부분 트리가 출력되고 root node가 출력되고 오른쪽 부분 트리가 출력됨



