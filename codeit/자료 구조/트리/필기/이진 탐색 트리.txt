<이진 탐색 트리>
- Binary Search Tree
- 딕셔너리나 세트 구상하는데에 쓰임
- 이진 탐색 트리 속성 : 특정 노드를 기준으로 왼쪽 트리에 있는 자식 노드들은 더 작아야 하고, 오른쪽 트리에 있는 자식 노드들은 더 커야함 
- 배열이나 파이썬 리스트로 구현하지 않고 노드 클래스를 정의하고 여러 노드 인스턴스들을 생성하고 이 인스턴스들을 연결시켜서 구현

자가 균형 이진 탐색 트리
- 자가 균형 혹은 높이 균형
- 삽입, 삭제 시 자동으로 높이를 작게 유지하는 노드 기반의 이진 탐색 트리
- 최악의 경우에도 이진 트리의 균형이 잘 맞도록 유지함
- 불균형과 균형의 성능 차이는 꽤 크다
- AVL 트리와 레드-블랙 트리 등이 있으며, 특히 레드-블랙 트리는 높은 효율성으로 인해 실무에서도 매우 빈번하게 쓰이는 트리 형태
- 자바의 해시맵 또한 효율적인 저장 구조를 위해 해시 테이블의 개별 체이닝시 연결 리스트와 함께 레드-블랙 트리를 병행해 저장하는 구조로 구현되어 

이진 탐색 트리 삽입
- 삽입 이후에도 이진 탐색 트리 속성이 유지되어야함
(트리의 높이 : h)
1) 새로운 노드 생성: O(1)
2) root 노드부터 비교하면서 저장할 위치 찾기: 최악의 경우 트리의 가장 깊은 곳에 저장할 때 : O(h)
3) 찾은 위치에 새롭게 만든 노드 연결: O(h)
=> 총 O(h)

이진 탐색 트리 탐색
1) 주어진 노드의 데이터와 탐색하려는 데이터 비교(root 노드에서 시작) 
2) 탐색하려는 데이터가 더 크면 노드의 오른쪽 자식으로 간다
3) 탐색하려는 데이터가 더 작으면 노드의 왼쪽 자식으로 간다
4) 찾을 때까지 반복
5) 탐색하려는 노드를 찾으면 리턴
=> O(h + 1) = O(h)

이진 탐색 트리 삭제
- 삭제하려는 데이터를 갖는 노드를 먼저 찾아야 됨
경우 1) 삭제하려는 데이터가 leaf 노드의 데이터일 때 : 노드의 위치가 왼쪽인지 오른쪽인지 확인한 후 부모 노드의 삭제하려는 위치의 노드를 None으로 설정
경우 2) 삭제하려는 데이터 노드가 하나의 자식 노드만 있을 때 : 자식 노드가 삭제하려는 데이터 노드 자리를 차지하면 됨. 자식 노드의 부모 노드를 삭제하려는 데이터 노드의 부모 노드로 설정
경우 3) 삭제하려는 데이터의 노드가 두 개의 자식이 있을 때: successor(삭제하려는 노드의 오른쪽 트리 중 가장 작은 노드) 이용
- 시간 복잡도 : O(h)
경우 1) 걸리는 시간이 노드 개수나 트리 높이에 비례하지 않음 = O(1)
경우 2) 그냥 레퍼런스 2개만 연결시켜주면 됨 = O(1)
경우 3 - 1) 먼저 지우려는 데이터 노드의 successor 노드 찾기 : O(h)
경우 3 - 2) 지우려는 노드에 successor 노드의 데이터 저장 : 단순히 노드에 데이터 넣는 단계 = O(h)
경우 3 - 3) successor 노드 지우기 : 오른쪽 자식 노드가 있으면 O(2), 없으면 O(1) = O(1)
=> O(h)

이진 탐색 트리 높이 h 분석
- 탐색, 삽입, 삭제 연산 'O(h)' = 높이가 낮을수록 여러 연산을 하기에 효율적 
- 편향된 트리일수록 연산들이 비효율적
- 이진 탐색 트리의 경우 완전 이진 트리가 아닌 경우가 더 많음. 그렇기 때문에 노드가 n개 있을 때, 높이 h가 항상 O(log(n))이라고 할 수 없음
EX) 최악의 경우 이진 탐색 트리의 높이 = n = 트리 안에서 노드가 직선적인 모양으로 저장됐을 때
- 평균 높이 : O(log(n))
** 삽입과 삭제 연산들을 반복하다보면 이진 탐색 트리의 노드들이 한쪽으로 편향될 수 있기 때문에 이진 탐색 트리의 연산들의 시간 복잡도는 보통 높이 그대로 'O(h)'

이진 탐색 트리로 딕셔너리 구현하기
- 노드에 key, value, parent, left_child, right_child 지정
- 시간 복잡도
1) key를 이용한 key - value 데이터 쌍 삭제 : O(h)
2) key를 이용한 노드 또는 value 탐색 : O(h)
3) key - value 쌍 삽입 : O(h)

이진 탐색 트리 vs 해시 테이블
- 삽입, 탐색, 삭제 연산은 모두 이진 탐색 트리보다 해시 테이블을 사용하는 것이 더 효율적
- 이진 탐색트리는 데이터 사이에 순서를 저장할 수 있지만, 해시 테이블은 그렇지 않다.
=> 세트의 데이터나 딕셔너리의 key를 정렬된 상태로 사용하고 싶을 때는 이진 탐색 트리를 사용해야 함. 해시 테이블 때보다는 연산의 효율성 조금 포기해야함.
