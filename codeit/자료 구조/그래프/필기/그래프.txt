<그래프>
- 연결 관계가 있는 데이터를 저장할 수 있는 자료 구조
- 연결 관계를 표현하기 위해 사용됨
- 모든 노드들이 서로 경로를 통해 연결될 필요는 없음

다양한 연결 관계 
- 위치 데이터, 사회 연결망
1) 통신 : 수많은 컴퓨터들의 연결 관계인 인터넷
2) 생물 : 유전자와 단백질의 상호 작용 관계 

그래프
- 노드 : 하나의 데이터 단위
- 엣지 : 노드들 사이에 있는 관계. 두 노드의 직접적인 연결 관계 데이터
- 인접 : 두 노드가 엣지로 연결되어 있다
- 경로 : 서로 엣지로 연결되어 있지는 않지만 경로를 통해 연결되어 있다
=> 최단 경로, 사이클 경로(시작과 끝이 동일)
- 차수 : 한 노드가 갖고 있는 엣지의 수

*무방향 그래프(Undirected graph) : 엣지가 쌍방향인 그래프
방향 그래프
- 인스타그램 팔로우 관계를 보면 한쪽만 팔로우하는 경우
- 엣지가 떠나는 노드를 앞에, 들어가는 노드를 뒤에 씀
- 경로에도 방향이 있음
- 차수를 2가지로 나눔. 출력 차수(나가는 차수) / 입력 차수(들어오는 차수)

가중치 그래프
- 엣지들이 연결 관계 뿐만 아니라 어떤 정보를 나타내는 수치를 가짐
*경로의 거리
1) 비가중치 그래프 : 한 경로에 있는 엣지의 수
2) 가중치 그래프 : 한 경로에 있는 엣지의 가중치의 합

그래프 엣지 구현
1) 인접 행렬 : 노드들의 연결 관계(엣지)를 나타내는 2차원 리스트
- 각 노드를 리스트에 저장해 고유 정수 인덱스를 준다
- 노드 수 * 노드 수 크기의 행렬을 만든다
- 노드들의 엣지 유무 및 가중치에 따라 행렬의 요소를 채운다
2) 인접 리스트 : 각 노드의 엣지를 리스트에 저장
- 방향 그래프의 경우 나가는 노드의 인접 리스트에 들어가는 노드를 넣고, 들어가는 노드에는 넣지 않음
- 가중치 그래프의 경우 튜플을 이용해서 리스트에 들어가는 노드와 가중치를 같이 넣음
*인접 행렬에서 인접한 노드들을 가지고 오려면 항상 길이가 V인 배열을 돌아야 함. 
=> 인접 리스트를 쓰면 인접한 노드만 들어 있는 배열을 돌아서 가지고 올 수 있음
=> 대부분의 경우 리스트는 길이가 V보다 짧음

그래프 복잡도 표현 기호
1) V : 그래프 안에 있는 모든 노드들의 집합. Vertex
2) E : 그래프 안에 있는 모든 엣지들의 집합. Edge
- 무방향 그래프의 경우 최대 엣지가 V^2/2, 방향 그래프는 V^2
=> 두 경우 모두 V^2에 비례
=> 시간 복잡도 O(V), O(E), O(lg(V)) 이렇게 표현
3) 노드를 저장하는 공간 : O(V)
4) 인접 행렬이 차지하는 공간 : O(V^2)
5) 인접 리스트가 차지하는 공간 : O(V+E)
6) 두 노드가 연결됐는지 확인하는데 걸리는 시간 : O(1)
- 선형 탐색을 해야되기 때문에 리스트 안에 있는 데이터를 다 돌아야 함. 최악의 경우 O(V) 
