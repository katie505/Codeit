<그래프 탐색>
그래프 탐색 : 하나의 시작점 노드에서 연결된 노드들을 모두 찾는 것
- 각 노드들을 어떤 순서로 탐색하는지에 따라 Breadth First Search, Depth First Search
- 순회 : 자료 구조안에 저장된 모든 데이터를 보는 것

BFS(Breadth FIrst Search) = 너비 우선 탐색 : 시작점에서 가까운 노드들을 탐색
- 그래프를 너비 우선적으로 탐색(수평적으로)
- '큐'가 중요
1) 시작 노드를 방문 표시 후, 큐에 넣음
2) 큐에 아무 노드가 없을 때까지:
	- 큐 가장 앞 노드를 꺼낸다
	- 꺼낸 노드에 인접한 노드들을 모두 보면서:
		- 처음 방문한 노드면:
			- 방문한 노드 표시를 해준다
			- 큐에 넣는다

- 시간 복잡도
1) 노드 전처리 : 모든 노드를 방문하지 않은 노드로 표시 = O(V)
2) 큐에 노드를 넣고 빼는데 걸리는 시간 : 큐는 데이터를 삽입하고 꺼내오는 연산들이 O(1) * 최대 V개의 노드 = O(V)
3) 큐에서 뺀 노드의 인접한 노드들을 도는데 걸리는 시간 : 모든 노드는 큐에 한 번만 들어가서 한 번만 나올 수 있음. 노드가 한 번 나올때마다 노드의 인접 리스트를 돌기 때문에 총 엣지 수 E에 비례하는 만큼 실행된다고 할 수 있음 = O(E)
=> 다 더하면 O(2V+E) = O(V+E)

DFS(Depth First Search) = 깊이 우선 탐색 
- 시작점에서 최대한 깊이 최대한 멀리 가는 탐색 방법(수직적으로)
- '스택'이 중요
(옅은 회색 = 스택에 들어있는 노드 /진한 회색 = 방문한 노드)
1) 시작 노드를 옅은 회색 표시 후, 스택에 넣음
2) 스택에 아무 노드가 없을 때까지:
	- 스택 가장 위 노드를 꺼낸다
	- 노드를 방문 표시한다
	- 인접한 노드들을 모두 보면서:
		- 처음 방문하거나 스택에 없는 노드면:
			- 옅은 회색 표시를 해준다
			- 스택에 넣어준다
- 시간 복잡도
1) 노드 전처리 : 모든 노드를 노란색 노드로 표시 = O(V)
2) 스택에 노드를 넣고 빼는 데 걸리는 시간 : 스택은 데이터를 삽입, 추출하는데 O(1) * 최대 V개의 노드 = O(V)
3) 스택에서 뺀 노드들의 인접한 노드들을 도는데 걸리는 시간 : BFS와 동일 : O(E)
=> O(2V+E) = O(V+E)