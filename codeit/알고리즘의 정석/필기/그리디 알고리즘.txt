<그리디 알고리즘>
- 글로벌 최적을 찾기 위해 각 단계에서 로컬 최적의 선택을 하는 휴리스틱 문제 해결 알고리즘
- 바로 눈앞의 이익만을 좇는 알고리즘
- 대부분의 경우에는 뛰어난 결과를 도출하지 못하지만, 드물게 최적해를 보장하는 경우도 있음
- 최적화 문제를 대상으로 함
- 최적해를 찾을 수 있으면 그것을 목표로 삼고, 찾기 어려운 경우에는 주어진 시간 내에 그런대로 괜찮은 해를 찾는 것을 목표로 삼는다
- 대부분의 문제들은 이런 로컬 최적해를 찾는 방법으로는 문제를 해결할 수 없지만, 합리적인 시간 내에 최적에 가까운 답을 찾을 수 있다는 점에서 매우 유용한 알고리즘
- 그리디 알고리즘이 잘 작동하는 문제들은 '탐욕 선택 속성'을 갖고 있는 '최적 부분 구조'인 문제
* 탐욕 선택 속성 : 앞의 선택이 이후 선택에 영향을 주지 않는 것. 즉, 그리디 알고리즘은 선택을 다시 고려하지 않음
* 최적 부분 구조 : 문제의 최적 해결 방법이 부분 문제에 대한 최적 해결 방법으로 구성되는 경우
=> 이 2가지 조건을 만족하면 최적해를 찾을 수 있음. 그렇지 않더라도 정답을 근사하게 찾는 용도로 활용할 수 있으며, 대부분의 경우 계산 속도가 빠르므로 매우 실용적

- 최단 경로 문제를 풀이하는 '다익스트라 알고리즘'은 대표적인 그리디 알고리즘의 예
- 압축 알고리즘인 '허프만 코딩 알고리즘'은 허프만 트리를 빌드할 때 그리드 알고리즘 사용
- 의상결정 트리 알고리즘으로 유명한 ID3 알고리즘이 그리디 알고리즘 = 항상 그때 그때 최선의 답을 찾아 트리를 빌드해 나감

- 그리디 알고리즘은 최적 부분 구조 문제를 푼다는 점에서 흔히 다이나믹 프로그래밍과 비교됨
=> 서로 풀 수 있는 문제의 성격이 다르며 알고리즘의 접근 방식 또한 다름(서로 반대 방향으로 접근하는 구조)
 - 다이나믹 프로그래밍이 하위 문제에 대한 최적의 솔루션을 찾은 다음, 이 결과들을 결합한 정보에 입각해 전역 최적 솔루션에 대한 선택을 함
 - 그리디 알고리즘은 각 단계마다 로컬 최적해를 찾는 문제로 접근해 문제를 더 작게 줄여나가는 형태

1) 배낭 문제
- 조합 최적화 분야의 매우 유명한 문제
- 배낭에 담을 수 있는 무게의 최댓값이 정해져 있고 각각 짐의 가치와 무게가 있는 짐들을 배낭에 넣을 때 가치의 합이 최대가 되도록 짐을 고르는 방법을 찾는 문제
- 짐을 쪼갤 수 있는 경우인 분할 가능 배낭 문제(그리드로 해결)와 짐을 쪼갤 수 없는 경우인 배낭 문제(다이나믹으로 해결)

2) 동전 바꾸기 문제
- 동전의 액면이 10원, 50원, 100원처럼 증가하면서 이전 액면의 배수 이상이 되면 그리디 알고리즘으로 풀 수 있음
- 우리나라 동전은 항상 배수 이상이므로 그리디로 풀 수 있음
- 각각의 동전을 최대한 활용하는 그리디한 방법이 가장 작은 동전 개수로 거슬러 줄 수 있는 방법
EX) 다른 나라에 갔더니 80원짜리 동전이 있다고 하면 다이나믹 프로그래밍으로 풀이

3) 가장 큰 합
- 그리디 알고맂므의 실패 사례
- 노드를 계속 더해가다가 마지막에 가장 큰 합이 되는 경로 찾는 문제
- 이진 트리를 정렬한다든지 등의 추가 작업을 하지 않는 한, 그리디 알고리즘으로는 풀이할 수 없다

