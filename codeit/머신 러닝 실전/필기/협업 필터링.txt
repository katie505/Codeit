<협업 필터링>
- 내용 기반 추천은 유저들의 평점이 서로 독립적
- 협업 필터링은 수많은 유저 데이터들이 협업해서 상품 추천

데이터 표현하기
- 평점 데이터를 사용할 때는 각 유저들의 평점 데이터를 하나로 묶어서 많이 사용
=> 각 유저의 평점 데이터를 벡터로 표현

비슷한 유저 정의하기
1. 유클리드 거리
- 두 유저 사이의 유클리드 거리가 작을수록 비슷, 클수록 덜 비슷
- dist(a,b) = 각 영화의 평점마다 차이를 계산하고 제곱하고 이걸 다 더한 후 제곱근

2. 코사인 유사도
- 데이터들을 선으로 나타내고 두 선 사이의 '각도'를 사용해서 유사도 측정
- 선들이 서로 반대 방향이면 각이 크기 때문에, 취향이 아예 다른 유저, 두선이 완전히 겹치면 취향이 같은 유저
- 선들의 길이는 전혀 사용하지 않음
- 각도는 코사인 함수에 넣어서 사용
- 유사도가 더 클수록 더 비슷함
- 코사인 유사도 = 두 데이터의 내적곱의 합 / {(데이터 요소의 제곱합)^(1/2) * (데이터 요소의 제곱합)^(1/2)}

3. 유클리드 거리 vs 코사인 유사도
- 직관적인 차이 : 코사인 유사도는 각 벡터, 또는 선의 크기가 중요하지 않음
=> 어떤 형식의 데이터를 사용하는지에 따라서 생각해서 유클리드 거리를 사용할지, 코사인 유사도를 사용할지 결정
- 유클리드 거리는 클수록 두 데이터가 다르고, 작을수록 두 데이터가 비슷함 / 코사인 유사도는 클수록 비슷, 작을수록 다름

평점 데이터 전처리
- 데이터가 군데군데 비어 있을 경우
1. 0으로 계산하기 : 비어있는 값들을 모두 0으로 생각하고 유사도 계산
=> 최악의 평점으로 계산이 됨. 별로 좋은 방법이 아님

2. 유저별 평균 평점으로 계산하기
- 0을 사용하는 것보다 훨씬 더 합리적으로 계산 가능

3. Mean Normalization으로 계산하기
- 0으로 계산 + 평균 평점으로 계산
- 빈값들을 모두 유저별 평균 평점으로 채워넣고 각 유저 평점에서 각 유저의 평균 평점을 다시 빼주기
- 각 데이터에서 평균을 빼서 데이터의 평균을 -으로 만들어 주는 것
- 모르는 값들을 합리적으로 채워 넣을 수 있다는 장점 & 까다로운 유저들과 유한 유저들에 대한 처리를 해줄 수 잇따는 점
- 모든 유저의 평균 평점을 0으로 맞춰주면 더 싫거나 보통이거나 좋아하는 영화들이 비슷한 값들을 가질 수 있기 때문에 비슷한 유저를 찾을 때 좀 더 직관적으로 찾아낼 수 있음

상품 추천하기
- 유클리드 거리 또는 코사인 유사도 사용해서 어떤 유저들이 설마 얼마나 비슷한지에 대한 기준 세우고 이걸 써서 영화 평점 예측
- 유저와 비슷한 유저를 찾는데 비슷한 유저 그룹을 흔히 '이웃'이라고 부름
-> 이 이웃들의 평점을 평균내서 예측. 이 중 가장 예측 값이 높은 영화들 추천

상품 기반 협업 필터링 
- 비슷한 상품을 써서 예측
- 유저x의 상품i에 대한 예측값 = 유저x가 평가한 k개의 이웃(유저x가 평가한 상품 중, 상품i와 가장 비슷한 상품의 집합)들에 대한 평점을 평균 낸 것

유저 vs 상품 기반 협업 필터링
- 이론상으로 큰 차이는 없음
- 하지만 실전에서는 상품 기반 협업 필터링이 더 성능이 좋은 경우가 많음
=> 유저들이 상품보다 복잡하기 때문!

협업 필터링의 장단점
1. 장점 
- 속성을 찾거나 정할 필요가 없음
- 내용 기반 추천보다 좀 더 폭넓은 상품을 추천할 수 있음
- 내용 기반 추천보다 성능이 더 좋게 나오는 경우가 많음

2. 단점
- 데이터가 많아야 함 : 유저 한 명이 열심히 평점을 줘도 다른 사람들도 열심히 평점을 줘야 함 / 새로운 물건이나 유저에게 추천해 주기 힘듦
- 인기가 많은 소수의 상품이 추천 시스템을 장악할 수 있음
- 어떤 상품이 왜 추천됐는지 정확히 알기 힘듦

어떤 방식으로 추천해 주는 것이 좋을까?
- 내용 기반, 협업 필터링 모두 사용
1. 내용 기반(선형 회귀/다항 회귀) & 협업 필터링(유저 기반/상품 기반) 4가지 방식으로 각각의 추천 상품을 보여주기
2. 4가지 방식의 평점 예측 평균 값을 이용해 값이 높은 상품들 추천


